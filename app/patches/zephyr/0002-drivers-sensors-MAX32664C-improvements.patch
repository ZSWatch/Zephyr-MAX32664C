From 69ba7dd61ad71139d708ff8fda22faa2e794649b Mon Sep 17 00:00:00 2001
From: Daniel Kampert <DanielKampert@kampis-elektroecke.de>
Date: Thu, 16 Oct 2025 15:02:57 +0200
Subject: [PATCH 2/2] drivers: sensors: MAX32664C improvements

- Add function to read the firmware version
- Fix broken SCD sensor reading
- Add SCD mode to worker

Signed-off-by: Daniel Kampert <DanielKampert@kampis-elektroecke.de>
---
 drivers/sensor/adi/max32664c/max32664c.c      | 51 ++++++++++++++++---
 drivers/sensor/adi/max32664c/max32664c_bl.c   |  8 ++-
 .../sensor/adi/max32664c/max32664c_worker.c   |  3 ++
 3 files changed, 50 insertions(+), 12 deletions(-)

diff --git a/drivers/sensor/adi/max32664c/max32664c.c b/drivers/sensor/adi/max32664c/max32664c.c
index 99d89cc655b..4efdb426029 100644
--- a/drivers/sensor/adi/max32664c/max32664c.c
+++ b/drivers/sensor/adi/max32664c/max32664c.c
@@ -51,6 +51,26 @@ int max32664c_i2c_transmit(const struct device *dev, uint8_t *tx_buf, uint8_t tx
 	return 0;
 }
 
+int max32664c_read_fw_version(const struct device *dev, uint8_t *major, uint8_t *minor,
+				     uint8_t *patch)
+{
+	uint8_t rx_buf[4] = {0};
+	uint8_t tx[2];
+
+	/* Read the firmware version */
+	tx[0] = 0xFF;
+	tx[1] = 0x03;
+	if (max32664c_i2c_transmit(dev, tx, 2, rx_buf, 4, MAX32664C_DEFAULT_CMD_DELAY)) {
+		return -EINVAL;
+	}
+
+	*major = rx_buf[1];
+	*minor = rx_buf[2];
+	*patch = rx_buf[3];
+
+	return 0;
+}
+
 /** @brief      Check the accelerometer and AFE WHOAMI registers.
  *              This function is called during device initialization.
  *  @param dev  Pointer to device
@@ -711,7 +731,29 @@ static int max32664c_channel_get(const struct device *dev, enum sensor_channel c
 		break;
 	}
 	case SENSOR_CHAN_MAX32664C_SKIN_CONTACT: {
-		val->val1 = data->report.scd_state;
+		switch (data->op_mode) {
+			case MAX32664C_OP_MODE_SCD: {
+				val->val1 = data->scd.scd_classifier;
+				break;
+			}
+#ifdef CONFIG_MAX32664C_USE_EXTENDED_REPORTS
+			case MAX32664C_OP_MODE_ALGO_AEC_EXT:
+			case MAX32664C_OP_MODE_ALGO_AGC_EXT: {
+				val->val1 = data->ext.scd_state;
+				break;
+			}
+#else
+			case MAX32664C_OP_MODE_ALGO_AEC:
+			case MAX32664C_OP_MODE_ALGO_AGC: {
+				val->val1 = data->report.scd_state;
+				break;
+			}
+#endif /* CONFIG_MAX32664C_USE_EXTENDED_REPORTS */
+			default: {
+				return -ENOTSUP;
+			}
+		}
+
 		break;
 	}
 	default: {
@@ -984,15 +1026,10 @@ static int max32664c_init(const struct device *dev)
 		return -EINVAL;
 	}
 
-	/* Read the firmware version */
-	tx[0] = 0xFF;
-	tx[1] = 0x03;
-	if (max32664c_i2c_transmit(dev, tx, 2, rx, 4, MAX32664C_DEFAULT_CMD_DELAY)) {
+	if (max32664c_read_fw_version(dev, &data->hub_ver[0], &data->hub_ver[1], &data->hub_ver[2])) {
 		return -EINVAL;
 	}
 
-	memcpy(data->hub_ver, &rx[1], 3);
-
 	LOG_DBG("Version: %d.%d.%d", data->hub_ver[0], data->hub_ver[1], data->hub_ver[2]);
 
 	if (max32664c_check_sensors(dev)) {
diff --git a/drivers/sensor/adi/max32664c/max32664c_bl.c b/drivers/sensor/adi/max32664c/max32664c_bl.c
index 147c9aefe3b..5da370f64c9 100644
--- a/drivers/sensor/adi/max32664c/max32664c_bl.c
+++ b/drivers/sensor/adi/max32664c/max32664c_bl.c
@@ -331,7 +331,7 @@ int max32664c_bl_enter(const struct device *dev, const uint8_t *firmware, uint32
 
 int max32664c_bl_leave(const struct device *dev)
 {
-	uint8_t hub_ver[3];
+	uint8_t major, minor, patch;
 	uint8_t rx_buf[4] = {0};
 	const struct max32664c_config *config = dev->config;
 
@@ -371,13 +371,11 @@ int max32664c_bl_leave(const struct device *dev)
 	LOG_INF("MCU type: %u", rx_buf[1]);
 
 	/* Read the firmware version */
-	if (max32664c_app_i2c_read(dev, 0xFF, 0x03, rx_buf, 4)) {
+	if (max32664c_read_fw_version(dev, &major, &minor, &patch)) {
 		return -EINVAL;
 	}
 
-	memcpy(hub_ver, &rx_buf[1], 3);
-
-	LOG_INF("Version: %d.%d.%d", hub_ver[0], hub_ver[1], hub_ver[2]);
+	LOG_INF("Version: %d.%d.%d", major, minor, patch);
 
 	return 0;
 }
diff --git a/drivers/sensor/adi/max32664c/max32664c_worker.c b/drivers/sensor/adi/max32664c/max32664c_worker.c
index 4943c621919..a9b12bb1eea 100644
--- a/drivers/sensor/adi/max32664c/max32664c_worker.c
+++ b/drivers/sensor/adi/max32664c/max32664c_worker.c
@@ -350,6 +350,9 @@ void max32664c_worker(const struct device *dev)
 			break;
 		}
 #endif /* CONFIG_MAX32664C_USE_EXTENDED_REPORTS */
+		case MAX32664C_OP_MODE_SCD: {
+			/* Get all samples to clear the FIFO */
+		}
 		default: {
 			break;
 		}
-- 
2.34.1

